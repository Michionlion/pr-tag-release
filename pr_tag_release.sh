#!/bin/bash

# This script requires Travis CI's env vars
# and a GITHUB_OAUTH_TOKEN env var

DEPLOY_BRANCH=${DEPOY_BRANCH-"^master$"}
MERGE_COMMIT_REGEX=${MERGE_COMMIT_REGEX-"Merge pull request #([0-9]+)"}
PATCH_CHANGE_REGEX=${PATCH_CHANGE_REGEX-"This (PR|release) is an?( small| tiny)? (update|bugfix)"}
MINOR_CHANGE_REGEX=${MINOR_CHANGE_REGEX-"This (PR|release) is a (feature( update| change)?|big (update|change))"}
MAJOR_CHANGE_REGEX=${MAJOR_CHANGE_REGEX-"This (PR|release) (is a (compatibility[ -])?breaking (update|change)| breaks( backwards)? compatibility)"}

LATEST_COMMIT_MSG="$(git log -1 --pretty=%B)"
LATEST_VERSION=$(git describe --abbrev=0 --tags)
LATEST_VERSION="${LATEST_VERSION#"v"}"
IFS='.' read -ra VERSION_SPLIT <<<"$LATEST_VERSION"
MAJOR=${VERSION_SPLIT[0]-0}
MINOR=${VERSION_SPLIT[1]-0}
PATCH=${VERSION_SPLIT[2]-0}

echo -e "Current semver: $MAJOR.$MINOR.$PATCH"
echo -e "Commit message: $LATEST_COMMIT_MSG"

# detect if merge commit (uses Github's default message from the web interface)
if [[ "$LATEST_COMMIT_MSG" =~ $MERGE_COMMIT_PREFIX ]]; then
    export PR_NUM="${BASH_REMATCH[1]}"
    echo -e "Detected merged pull request as PR #$PR_NUM"
else
    echo -e "Could not detect PR number from commit message"
    return 0
fi

if [[ -n "$TRAVIS_TAG" ]]; then
    echo -e "Current commit ($TRAVIS_COMMIT) already has a tag"
    echo -e "Don't tag a PR merge commit manually, exiting"
    return 0
fi

if [[ ! "$TRAVIS_BRANCH" =~ $DEPLOY_BRANCH ]]; then
    echo -e "Not on deploy branch, exiting"
    return 0
fi

RESULT_FILE="${TRAVIS_COMMIT}_pr_tag.json"

if [[ -z "$GITHUB_OAUTH_TOKEN" ]]; then
    curl "https://api.github.com/repos/${TRAVIS_REPO_SLUG}/pulls/${PR_NUM}" | jq '[.title, .body, .merged]' > "$RESULT_FILE"
else
    curl -H "Authorization: token ${GITHUB_OAUTH_TOKEN}" "https://api.github.com/repos/${TRAVIS_REPO_SLUG}/pulls/${PR_NUM}" | jq '[.title, .body, .merged]' > "$RESULT_FILE"
fi

if [[ -z "$(cat "$RESULT_FILE")" ]]; then
    echo -e "No result retrieved"
    return 0
fi

TITLE="$(jq '.[0]' < "$RESULT_FILE")"
PR_BODY="$(jq '.[1]' < "$RESULT_FILE")"
MERGED="$(jq '.[2]' < "$RESULT_FILE")"
PR_BODY="${PR_BODY%\"}"
PR_BODY="${PR_BODY#\"}"

export TITLE
export MERGED
export PR_BODY

if [[ "$PR_BODY" =~ $PATCH_CHANGE_REGEX ]]; then
    # patch version
    PATCH=$((PATCH+1))
    echo -e "Detected patch version change"
elif [[ "$PR_BODY" =~ $MINOR_CHANGE_REGEX ]]; then
    # minor version
    PATCH="0"
    MINOR=$((MINOR+1))
    echo -e "Detected minor version change"
elif [[ "$PR_BODY" =~ $MAJOR_CHANGE_REGEX ]]; then
    # major version
    PATCH="0"
    MINOR="0"
    MAJOR=$((MAJOR+1))
    echo -e "Detected major version change"
else
    # non-versioned
    echo -e "Detected non-versioned change, exiting"
    return 0
fi


if [[ "$MERGED" != "true" ]]; then
    echo -e "PR is not merged, exiting"
    return 0
fi

export TRAVIS_TAG="v$MAJOR.$MINOR.$PATCH"

# Generate release body
# shellcheck disable=SC2155
export RELEASE_BODY=$(cat <<EOF
## Release ${TRAVIS_TAG}: ${TITLE}

${PR_BODY}

*Build autogenerated by [pr-tag-release](https://github.com/Michionlion/pr-tag-release)*
EOF
)

echo -e "Release description: $RELEASE_BODY"

git config --global user.email "travis@travis-ci.org"
git config --global user.name "Travis CI"

# set remote url to use GITHUB_OAUTH_TOKEN
# assumes github.com, normal url, etc.
export REMOTE_URL="https://${GITHUB_OAUTH_TOKEN}@github.com/${TRAVIS_REPO_SLUG}.git"

# create tag
git tag -a $TRAVIS_TAG -m "$TITLE"
git push "$REMOTE_URL" --tags

export DO_GITHUB_RELEASE="true"

return 0

